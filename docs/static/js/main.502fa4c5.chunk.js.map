{"version":3,"sources":["stores/expenseStore.js","stores/infoStore.js","stores/index.js","stores/constants.js","components/expense/AddExpense.js","components/expense/ExpenseList.js","components/info/Info.js","App.js","reportWebVitals.js","index.js"],"names":["makeAutoObservable","require","expenseStore","rootStore","list","this","console","log","month","expenseData","amount","title","push","index","filter","item","itemIndex","infoStore","value","StoreContext","React","createContext","useStores","useContext","monthNames","observer","refAmount","useRef","className","type","placeholder","ref","onChange","e","changeMonth","target","map","onClick","current","addExpense","focus","length","exp","deleteExpense","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAAQA,EAAuBC,EAAQ,GAA/BD,mBA0BOE,E,WArBX,WAAYC,GAAY,yBAFxBC,KAAO,GAGHC,KAAKF,UAAYA,EACjBH,EAAmBK,MAEnBC,QAAQC,IAAI,oBAAqBF,KAAKF,W,8CAG1C,YAA6B,IAAjBK,EAAgB,EAAhBA,MACFC,EAAc,CAChBC,OAFoB,EAATA,OAGXC,MAAO,GACPH,SAEJH,KAAKD,KAAKQ,KAAKH,K,2BAGnB,SAAcI,GACVR,KAAKD,KAAOC,KAAKD,KAAKU,QAAO,SAACC,EAAMC,GAAP,OAAqBA,IAAcH,S,YCNzDI,E,WAXX,WAAYd,GAAY,yBAFxBK,MAAQ,UAGJH,KAAKF,UAAYA,EAEjBH,6BAAmBK,M,+CAGvB,SAAYa,GACRb,KAAKG,MAAQU,M,KCEfC,EAAeC,IAAMC,cAAc,IAPrC,aAAe,oBACXhB,KAAKH,aAAe,IAAIA,EAAaG,MACrCA,KAAKY,UAAY,IAAIA,EAAUZ,QAQ1BiB,EAAY,kBAAMF,IAAMG,WAAWJ,ICjBnCK,EAAa,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,U,OCsC5EC,eAjCI,WAEf,IAAMC,EAAYC,iBAAO,MAFJ,EAIeL,IAA5BpB,EAJa,EAIbA,aAAce,EAJD,EAICA,UAUtB,OACI,sBAAKW,UAAU,MAAf,UACI,uBAAOC,KAAK,SAASC,YAAY,eAAeF,UAAU,wBAAwBG,IAAKL,IACvF,wBACIE,UAAU,wBACVI,SAAU,SAACC,GACPhB,EAAUiB,YAAYD,EAAEE,OAAOjB,QAHvC,SAMQM,EAAWY,KAAI,SAAC5B,EAAOK,GAAR,OACX,wBAAoBK,MAAOV,EAA3B,SAAmCA,GAAtBK,QAIzB,wBAAQwB,QAtBU,WAAO,IACrBC,EAAYZ,EAAZY,QACRpC,EAAaqC,WAAW,CAAE/B,MAAOS,EAAUT,MAAOE,OAAQ4B,EAAQpB,QAElEoB,EAAQpB,MAAQ,GAChBoB,EAAQE,SAiBgCZ,UAAU,2BAA9C,+BCWGH,eAxCK,WAAO,IAEfvB,EAAiBoB,IAAjBpB,aAER,OACI,oCACI,8CAEA,cAAC,EAAD,IAEA,oBAAI0B,UAAU,kBAAd,SAEQ1B,EAAaE,MAAQF,EAAaE,KAAKqC,OAAS,EAC5CvC,EAAaE,KAAKgC,KAAI,SAACM,EAAK7B,GACxB,OAAO,oBACHe,UAAU,kBACVS,QAAS,WACLnC,EAAayC,cAAc9B,IAH5B,SAOH,sBAAKe,UAAU,MAAf,UACI,qBAAKA,UAAU,WAAf,SACKc,EAAIlC,QAET,qBAAKoB,UAAU,WAAf,SACKc,EAAIhC,aAZDG,MAiBf,mBAAGe,UAAU,mBAAb,8CCtBdH,eAVF,WAAO,IACRR,EAAcK,IAAdL,UAER,OACI,yBAASW,UAAU,eAAnB,SACI,oBAAIA,UAAU,YAAd,SAA2BX,EAAUT,aCIlCoC,MATf,WACE,OACE,sBAAKhB,UAAU,gBAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCKSiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.502fa4c5.chunk.js","sourcesContent":["const { makeAutoObservable } = require(\"mobx\");\r\n\r\nclass expenseStore {\r\n    list = [];\r\n\r\n    constructor(rootStore) {\r\n        this.rootStore = rootStore;\r\n        makeAutoObservable(this);\r\n\r\n        console.log('  this.rootStore ', this.rootStore)\r\n    }\r\n\r\n    addExpense({month, amount}) {\r\n        const expenseData = {\r\n            amount,\r\n            title: \"\",\r\n            month\r\n        }\r\n        this.list.push(expenseData);\r\n    }\r\n\r\n    deleteExpense(index) {\r\n        this.list = this.list.filter((item, itemIndex) => itemIndex !== index);\r\n    }\r\n}\r\n\r\nexport default expenseStore;","import { makeAutoObservable } from \"mobx\";\r\n\r\nclass infoStore {\r\n    month = \"January\";\r\n\r\n    constructor(rootStore) {\r\n        this.rootStore = rootStore;\r\n\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    changeMonth(value) {\r\n        this.month = value;\r\n    }\r\n}\r\n\r\nexport default infoStore;","import React from \"react\";\r\nimport expenseStore from \"./expenseStore\";\r\nimport infoStore from \"./infoStore\";\r\n\r\n// root store will contain multiple stores\r\nclass RootStore {\r\n\r\n    constructor() {\r\n        this.expenseStore = new expenseStore(this);\r\n        this.infoStore = new infoStore(this);\r\n    }\r\n}\r\n\r\n// this context will be used\r\nconst StoreContext = React.createContext(new RootStore());\r\n\r\n// this hooks will be access from component to get stores\r\nexport const useStores = () => React.useContext(StoreContext);","export const monthNames = [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\"];","import { observer } from \"mobx-react-lite\";\r\nimport { useRef } from \"react\";\r\nimport { useStores } from \"../../stores\";\r\nimport { monthNames } from \"../../stores/constants\";\r\n\r\nconst AddExpense = () => {\r\n\r\n    const refAmount = useRef(null);\r\n\r\n    const { expenseStore, infoStore } = useStores();\r\n\r\n    const handlerAddExpense = () => {\r\n        const { current } = refAmount;\r\n        expenseStore.addExpense({ month: infoStore.month, amount: current.value });\r\n\r\n        current.value = \"\";\r\n        current.focus();\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <input type=\"number\" placeholder=\"enter amount\" className=\"form-control col-sm-6\" ref={refAmount} />\r\n            <select\r\n                className=\"form-control col-sm-3\"\r\n                onChange={(e) => {\r\n                    infoStore.changeMonth(e.target.value)\r\n                }}>\r\n                {\r\n                    monthNames.map((month, index) => (\r\n                        <option key={index} value={month}>{month}</option>\r\n                    ))\r\n                }\r\n            </select>\r\n            <button onClick={handlerAddExpense} className=\"btn btn-primary col-sm-2\">Add Expense</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default observer(AddExpense);","import { observer } from \"mobx-react-lite\";\r\nimport { useStores } from \"../../stores\";\r\nimport AddExpense from \"./AddExpense\";\r\n\r\nconst ExpenseList = () => {\r\n\r\n    const { expenseStore } = useStores();\r\n\r\n    return (\r\n        <section>\r\n            <h1>Expense List</h1>\r\n\r\n            <AddExpense />\r\n\r\n            <ul className=\"list-group mt-4\">\r\n                {\r\n                    expenseStore.list && expenseStore.list.length > 0 ?\r\n                        expenseStore.list.map((exp, index) => {\r\n                            return <li key={index}\r\n                                className=\"list-group-item\"\r\n                                onClick={() => {\r\n                                    expenseStore.deleteExpense(index);\r\n\r\n                                }}\r\n                            >\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-sm-6\">\r\n                                        {exp.month}\r\n                                    </div>\r\n                                    <div className=\"col-sm-6\">\r\n                                        {exp.amount}\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </li>\r\n                        }) : <p className=\"alert alert-info\">You don't have any list!</p>\r\n                }\r\n            </ul>\r\n\r\n\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default observer(ExpenseList);","import { observer } from \"mobx-react-lite\";\r\nimport { useStores } from \"../../stores\";\r\n\r\nconst Info = () => {\r\n    const { infoStore } = useStores();\r\n\r\n    return (\r\n        <section className=\"info-wrapper\">\r\n            <h3 className=\"highlight\">{infoStore.month}</h3>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default observer(Info);","import ExpenseList from './components/expense/ExpenseList';\nimport Info from './components/info/Info';\n\nfunction App() {\n  return (\n    <div className=\"App container\">\n      <Info />\n      <ExpenseList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}